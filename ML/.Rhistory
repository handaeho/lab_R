predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
# k - NN 알고리즘을 구현한 패키지 설치
install.packages("class")
# 패키지를 메모리에 로드
library(class)
# 실제 진단 결과와 예측 결과의 차이를 분석하기 위해, '교차이원표' 생성.
install.packages("gmodels")
library(gmodels)
predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
source('C:/dev/lab-R/ML/ml01_kNN알고리즘.R', encoding = 'UTF-8', echo=TRUE)
# 위스콘신 유방암 데이터 준비
wbcd = read.csv("data/wisc_bc_data.csv", stringsAsFactors = F)
# 위스콘신 유방암 데이터 준비
wbcd = read.csv("data/wisc_bc_data.csv", stringsAsFactors = F)
# 위스콘신 유방암 데이터 준비
wbcd = read.csv("C:\dev\lab-R\data/wisc_bc_data.csv", stringsAsFactors = F)
# 위스콘신 유방암 데이터 준비
wbcd = read.csv("C:/dev/lab-R/data/wisc_bc_data.csv", stringsAsFactors = F)
source('C:/dev/lab-R/ML/ml01_kNN알고리즘.R', encoding = 'UTF-8', echo=TRUE)
install.packages("gmodels")
predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
# k - NN 알고리즘을 구현한 패키지 설치
install.packages("class")
# 패키지를 메모리에 로드
library(class)
# 실제 진단 결과와 예측 결과의 차이를 분석하기 위해, '교차이원표' 생성.
install.packages("gmodels")
library(gmodels)
predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
CrossTable(x = test_label,
y = predict,
prop.chisq = F)
source('C:/dev/lab-R/ML/ml01_kNN알고리즘.R', encoding = 'UTF-8')
install.packages("class")
install.packages("gmodels")
# 실제 진단 결과와 예측 결과의 차이를 분석하기 위해, '교차이원표' 생성.
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
# k-NN 알고리즘을 구현한 패키지 설치
install.packages("class")
# 패키지를 메모리에 로드
library(class)
CrossTable(x = test_label,
y = predict,
prop.chisq = F)
predict <- knn(train = train_data,
test = test_data,
cl = train_label,
k = 7)
CrossTable(x = test_label,
y = predict,
prop.chisq = F)
source('C:/dev/lab-R/ML/ml01_kNN알고리즘.R', encoding = 'UTF-8')
